// ========  Async functions. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ Promise   ========

function promiseFunction() {
  const myPromise = new Promise(function (resolve, reject) {
    setTimeout(() => {
      const result = false;
      if (result) {
        resolve('DONE!');
      } else {
        reject('FAIL!');
      }
    }, 500);
  })
    .then(function (data) {
      console.log('---- Resolve function ----');
      console.log(data);
    })
    .catch(function (data) {
      console.log('---- Reject function ----');
      console.log(data);
    });
  //? return myPromise;
}
// promiseFunction();

//? promiseFunction().then().catch()
//=================================================================

async function startPromise() {
  try {
    const res = await promiseFunction();
    console.log(res);
  } catch (e) {
    //imagine that the server returned an error to us, then in this place in the code the error will be caught
    console.log(e);
  }
}
// startPromise();

//=================================================================

//? ========  –ù–µ—Å–∫–æ–ª—å–∫–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. –°–µ—Ä–∏—è –ø—Ä–æ–º–∏—Å–æ–≤.   ======== best code

function checkRooms() {
  return new Promise(function (resolve, reject) {
    setTimeout(function () {
      console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä–∞ –≤ –æ—Ç–µ–ª–µ...');
      // ---- –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–µ–ª—å ---
      let availableRooms = true; //! set false

      if (availableRooms) {
        resolve('–ù–æ–º–µ—Ä–∞ –µ—Å—Ç—å!');
      } else {
        reject('–ù–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç.');
      }
    }, 1500);
  });
}

function checkTickets(data) {
  return new Promise(function (resolve, reject) {
    setTimeout(() => {
      console.log('----  checkTickets ----');
      console.log('–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ:', data);

      console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã...');
      // ---- –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é ---
      const availableTickets = true;

      if (availableTickets) {
        let message = '–ë–∏–ª–µ—Ç—ã –µ—Å—Ç—å';
        resolve(message);
      } else {
        let message = '–ë–∏–ª–µ—Ç–æ–≤ –Ω–µ—Ç';
        reject(message);
      }
    }, 1000);
  });
}

function submitVocation(data) {
  console.log('-----submitVocation ------');
  console.log('Answer in previous step -', data);
  console.log('We are going on vacation‚úàÔ∏èüèùüèñ');
}
function cancelVocation(data) {
  console.log('-----cancelVocation------');
  console.log('Answer in previous step -', data);
  console.log('Vacation canceled üò≠');
}
//============ you shouldn't write this code without (try catch)
async function checkVacation() {
  const roomsResult = await checkRooms();
  const ticketsResult = await checkTickets(roomsResult);

  if (ticketsResult) {
    submitVocation(ticketsResult);
  } else {
    cancelVocation(ticketsResult);
  }
}
//? checkVacation()

//============ you need to use (try catch) in this case

async function checkVacationTryCatch() {
  try {
    const roomsResult = await checkRooms();
    const ticketsResult = await checkTickets(roomsResult);
    submitVocation(ticketsResult);
  } catch (error) {
    cancelVocation(error);
  }
}

checkVacationTryCatch()