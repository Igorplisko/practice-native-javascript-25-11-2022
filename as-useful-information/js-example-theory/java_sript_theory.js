
1. Что такое замыкание ?

   Замыкание когда функция имеет доступ к переменным из вышестоящего скопа и замыкает в себе значение
Ну к примеру функция внутри функции
Функция замыкает к себе значения из вышестоящего скопа!

2. Какая разница между null и undefined ?

   null - это особый объект, потому что typeof null возвращает 'object'.С другой стороны, undefined означает, что переменная не была объявлена или ей не было присвоено значение., т.е.объявленной, но не инициализированной переменной;
функции, которая ничего не возвращает явно, например, console.log(1);
несуществующего свойства объекта! null - это особый объект, потому что typeof null возвращает 'object'.С другой стороны, undefined означает, что переменная не была объявлена или ей не было присвоено значение.



3. Что такое прототип объекта ?

   В двух словах, прототип — это план(схема или проект) объекта.Он используется как запасной вариант для свойств и методов, существующих в данном объекте.Это также один из способов обмена свойствами и функциональностью между объектами.Это основная концепция прототипного наследования в JS.

const o = {}
console.log(o.toString()) // [object Object]

Несмотря на то, что объект «о» не имеет свойства toString, обращение к этому свойству не вызывает ошибки.Если определенного свойства нет в объекте, его поиск осуществляется сначала в прототипе объекта, затем в прототипе прототипа объекта и так до тех пор, пока свойство не будет найдено.Это называется цепочкой прототипов.На вершине цепочки прототипов находится Object.prototype.

4. Что такое поднятие(Hoisting) ?

   Поднятие — это термин, описывающий подъем переменной или функции в глобальную или функциональную области видимости.

Для того, чтобы понять, что такое Hoisting, необходимо разобраться с тем, что представляет собой контекст выполнения.


5. Является ли использование унарного плюса(оператор "+") самым быстрым способом преобразования строки в число ?

   Согласно MDN оператор "+" действительно является самым быстрым способом преобразования строки в число, поскольку он не выполняет никаких операций со значением, которое является числом.




   6. Какие значения в JS являются ложными ?

const falsyValues = ['', 0, null, undefined, NaN, false]

7. Как проверить, является ли значение ложным ?

   Следует использовать функцию Boolean или оператор "!!"(двойное отрицани

      |
      8. Что такое IIFE ?

      IIFE или Immediately Invoked Function Expression — это функция, которая вызывается или выполняется сразу же после создания или объявления.Для создания IIFE необходимо обернуть функцию в круглые скобки(оператор группировки), превратив ее в выражение, и затем вызвать ее с помощью еще одних круглых скобок.Это выглядит так: (function () { })().



      
0.Что такое шаблонные литералы(Template Literals) ?

      Шаблонные литералы — относительно новый способ создания строк в JS.Шаблонные литералы создаются с помощью двойных обратных кавычек(``):



      9. Какие приемы работы с асинхронным кодом в JS Вы знаете ?

      Функции обратного вызова(Callbacks).
         Промисы(Promises).
         Async / await.
Библиотеки вроде async.js, blueprint, q, co.



1. Что такое приведение типов ? какие бывают ?
      (Явное(через конструкторы Boolean(), Number) не явное(+, !  ))





21. Что такое AJAX ?
   AJAX или Asyncronous JavaScript and XML — это набор взаимосвязанных технологий, которые позволяют работать с данными в асинхронном режиме.Это означает, что мы можем отправлять данные на сервер и получать данные с него без перезагрузки веб - страницы.
AJAX использует следующие технологии:
HTML — структура веб - страницы.
   CSS — стили веб - страницы.
      JavaScript — поведение страницы и работа с DOM.
XMLHttpRequest API — отправка и получение данных с сервера.
   PHP, Python, Nodejs — какой - нибудь серверный язык.


   22. В чем разница между spread - оператором и rest - оператором ?
   Операторы spread и rest имеют одинаковый синтаксис("...").Разница состоит в том, что с помощью spread мы передаем или распространяем данные массива на другие данные, а с помощью rest — получаем все параметры функции и помещаем их в массив(или извлекаем часть параметров)

23. Что такое функция обратного вызова(Callback Function) ?

   Функция обратного вызова — это функция, вызов которой отложен на будущее(происходит при некоторых условиях, например, при наступлении события).


   24. Что такое объект arguments ?
   Arguments — это коллекция аргументов, передаваемых функции.Это объект, подобный массиву, у него есть свойство length, мы можем получить доступ к определенному значению с помощью arguments[i], но у него отсутствуют методы forEach, reduce, filter и map.Он позволяет узнать количество параметров функции



29. В чем разница между методами call и apply ?

   Отличие между call и apply состоит в том, как мы передаем аргументы в вызываемой функции.В apply аргументы передаются в виде массива, в call — через запятую.

30. Для чего используется метод Function.prototype.bind ?

   Bind возвращает новую функцию, значением this которой является объект, указанный в качестве первого параметра.В отличие от bind, call и apply сразу же вызывают функцию.



   31..Что такое область видимости(Scope) ?

   Область видимости — это место, где(или откуда) мы имеем доступ к переменным или функциям.JS имеем три типа областей видимости: глобальная, функциональная и блочная(ES6).

Глобальная область видимости — переменные и функции, объявленные в глобальном пространстве имен, имеют глобальную область видимости и доступны из любого места в коде.



32. Для чего используется ключевое слово «new »?

Ключевое слово «new » используется в функциях - конструкторах для создания нового объекта(нового экземпляра класса).

   Допустим, у нас есть такой код:

function Employee(name, position, yearHired) {
   this.name = name
   this.position = position
   this.yearHired = yearHired
}

const emp = new Employee('Marko Polo', 'Software Development', 2017)

Ключевое слово «new » делает 4 вещи:

Создает пустой объект.
Привязывает к нему значение this.
Функция наследует от functionName.prototype.
Возвращает значение this, если не указано иное.