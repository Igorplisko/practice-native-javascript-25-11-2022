1.Функции в JavaScript
Функции - ключевая концепция в JavaScript.Важнейшей особенностью языка является первоклассная поддержка функций.Любая функция это объект, и следовательно ею можно манипулировать как объектом, в частности

--передавать как аргумент и возвращать в качестве результата при вызове других функций(функций высшего порядка);
--создавать анонимно и присваивать в качестве значений переменных или свойств объектов.
//?------------------------------------------------------------------------------------------------

2.--Для понимания работы функций необходимо(и достаточно ?) иметь представление о следующих моментах:
1.способы объявления
2.способы вызова
3.параметры и аргументы вызова(arguments)
4.область данных(Scope) и замыкания(Closures)
5.объект привязки(this)
6.возвращаемое значение(return)
7.исключения(throw)
8.использование в качестве конструктора объектов
//?------------------------------------------------------------------------------------------


3.--Сравнение Function Decaration и Function Expression
Function Declaration - функция, объявленная в основном потоке кода.
Function Expression - объявление функции в контексте какого - либо выражения, например присваивания.
Несмотря на немного разный вид, по сути две эти записи делают одно и то же:

1.Основное отличие между ними: функции, объявленные как Function Declaration, создаются интерпретатором до выполнения кода.

Поэтому их можно вызвать до объявления, например:

sayHi("Вася"); // Привет, Вася

function sayHi(name) {
   console.log("Привет, " + name);              // Function Declaration
}
А если бы это было объявление Function Expression, то такой вызов бы не сработал:

sayHi("Вася"); // ошибка!

var sayHi = function (name) {
   console.log("Привет, " + name);             // Function Expression
}
   //?------------------------------------------------------------------------------------------------


   - Function.prototype.apply()
Вызывает функцию и устанавливает this в контекст предоставленного значения; аргументы передаются объектом Array.

- Function.prototype.bind()
Создаёт новую функцию, которая, при вызове, самостоятельно вызывает эту функцию в контексте предоставленного значения, с данной последовательностью аргументов, предшествующих любым аргументам, переданным в новую функцию при её вызове.Устанавливает this в контекст предоставленного значения.

- Function.prototype.call()
Вызывает(выполняет) функцию и устанавливает this в контекст предоставленного значения; аргументы передаются как есть.

 1.--В чем разница между методами call и apply ?

   Отличие между call и apply состоит в том, как мы передаем аргументы в вызываемой функции.В apply аргументы передаются в виде массива, в call — через запятую.

2.--Для чего используется метод Function.prototype.bind ?

   Bind возвращает новую функцию, значением this которой является объект, указанный в качестве первого параметра.В отличие от bind, call и apply сразу же вызывают функцию.
//?--------------------------------------------------------------------------------------------------------


   --Отличий между обычными и стрелочными функциями:
1. this
1.1 Обыкновенные функции
Внутри обыкновенной функции значение this динамическое(в зависимости от контекста исполнения).Динамический контекст означает, что значение this зависит от того как была вызвана функция. 
1.2 Стрелочные функции(Отсутствие связывания с this)
Поведение this внутри стрелочной функции отличается от поведения this внутри обычной функции.Не имеет значения как она была вызвана, значение this внутри стрелочной функции всегда эквивалентно значения this внешней функции

2.Вызов с помощью call или apply
Так как значение this определяется лексикой, вызов стрелочных функций с помощью методов call() или apply(), даже если передать аргументы в эти методы, не влияет на значение this.

3. Не имеет собственного объекта arguments
Стрелочные функции не имеют собственного объекта arguments, поэтому в теле стрелочных функций arguments будет ссылаться на переменную в окружающей области.

4. Стрелочные функции
Как следствие того, что стрелочные функции не имеют собственного this они не могут быть использованы для создания объектов.Если ты попытаешься вызвать стрелочную функцию с использованием ключевого слова new, JS кинет исключение:

5.У стрелочных функций нет доступа к объекту arguments.
5.1 Обыкновенные функции
Внутри тела обыкновенной функции, существует специальный массив arguments содержащий список аргументов с которым функция была вызвана.
5.2 Стрелочные функции
С другой стороны, в стрелочных функциях отсутствует специальное слово arguments.Опять, точно так же, как и со значение this массив arguments для стрелочных функций будет браться из внешней функции.
объявленного с помощью const, но не само свойство (переменную).

6.Мы также можем передавать параметры стрелочным функциям.Если мы передаем один параметр, его можно не оборачивать в круглые скобки и можем не писать return.

//?--------------------------------------------------------------------------------------------------------

--Что такое IIFE ?
   IIFE или Immediately Invoked Function Expression — это функция, которая вызывается или выполняется сразу же после создания или объявления.Для создания IIFE необходимо обернуть функцию в круглые скобки(оператор группировки), превратив ее в выражение, и затем вызвать ее с помощью еще одних круглых скобок.Это выглядит так: (function () { })().
 //?--------------------------------------------------------------------------------------------------------


 --Что такое цель события или целевой элемент(event.target) ?

   Простыми словами, event.target — это элемент, в котором происходит событие, или элемент, вызвавший событие.


    --Что такое текущая цель события(event.currentTarget) ?

   Event.currentTarget — это элемент, к которому прикреплен прослушиватель событий.
 //?--------------------------------------------------------------------------------------------------------

--Что такое функции высшего порядка(Higher Order Functions) ?

   Функция высшего порядка — это функция, возвращающая другую функцию или принимающая другую функцию в качестве аргумента.

function higherOrderFunction(param, callback) {
   return callback(param)
}

//?--------------------------------------------------------------------------------------------------------








//?--------------------------------------------------------------------------------------------------------
1.Что такое всплытие события ?

   Когда событие происходит в элементе DOM, оно затрагивает не только этот элемент.Событие «всплывает» (подобно пузырьку воздуха в воде), переходит от элемента, вызвавшего событие(event.target), к его родителю, затем поднимается еще выше, к родителю родителя элемента, пока не достигает объекта Window.

2.Что такое погружение события ?
   Когда событие происходит в элементе DOM, оно происходит не только в нем.В фазе погружения событие опускается от объекта Window до цели события через всех его предков.
 //?--------------------------------------------------------------------------------------------------------
